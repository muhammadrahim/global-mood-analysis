/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package to.the.moon

import com.google.common.collect.Lists
import com.twitter.hbc.ClientBuilder
import com.twitter.hbc.core.Constants
import com.twitter.hbc.core.HttpHosts
import com.twitter.hbc.core.endpoint.StatusesFilterEndpoint
import com.twitter.hbc.core.processor.StringDelimitedProcessor
import com.twitter.hbc.httpclient.BasicClient
import com.twitter.hbc.httpclient.auth.Authentication
import com.twitter.hbc.httpclient.auth.OAuth1
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import java.util.concurrent.LinkedBlockingDeque
import java.util.concurrent.TimeUnit.SECONDS


@Component
class TwitterStreamProducer(private val sentimentAnalysisService: SentimentAnalysisService) {

    @Value("\${consumer.key}")
    private lateinit var consumerKey: String

    @Value("\${consumer.secret}")
    private lateinit var consumerSecret: String

    @Value("\${token}")
    private lateinit var token: String

    @Value("\${secret}")
    private lateinit var secret: String

    private val logger: Logger = LoggerFactory.getLogger(TwitterStreamProducer::class.java)

    fun stream() {
        val (msgQueue, twitterClient) = createClient()
        while (!twitterClient.isDone) {
            msgQueue.poll(5, SECONDS)?.let { json ->
                TweetParser().parse(json).also { tweet ->
                    handleTweet(tweet)
                }
            }
        }
    }

    private fun handleTweet(tweet: Tweet) {
        val sentimentResult = sentimentAnalysisService.analyse(tweet.text)
        logger.info(tweet.text)
        logger.info("sentiment: $sentimentResult")
    }

    private fun createClient(): Pair<LinkedBlockingDeque<String>, BasicClient> {
        val msgQueue = LinkedBlockingDeque<String>(1000)
        val hoseBirdHosts = HttpHosts(Constants.STREAM_HOST)
        val hoseBirdEndpoint = StatusesFilterEndpoint()

        val terms: List<String> = Lists.newArrayList("n26", "fuck")
        hoseBirdEndpoint.trackTerms(terms)

        val hoseBirdAuth: Authentication = OAuth1(consumerKey, consumerSecret, token, secret)
        val twitterClient = ClientBuilder()
            .name("HoseBird-Client")
            .hosts(hoseBirdHosts)
            .authentication(hoseBirdAuth)
            .endpoint(hoseBirdEndpoint)
            .processor(StringDelimitedProcessor(msgQueue))
            .build()
        twitterClient.connect()
        return Pair(msgQueue, twitterClient)
    }
}